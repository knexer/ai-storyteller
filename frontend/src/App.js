import React from "react";

import { GraphAndDetail } from "./app/graph_and_detail";

const serialized_graph = {
  "py/object": "llmtaskgraph.task_graph.TaskGraph",
  tasks: [
    {
      "py/object": "llmtaskgraph.task.LLMTask",
      task_id: "f24d7915-895f-44c1-87bc-8421a0828847",
      deps: { "py/tuple": [] },
      kwdeps: {},
      created_by: null,
      output_data: [
        "Big Mac from McDonald's",
        "Whopper from Burger King",
        "10 Piece Chicken McNuggets from McDonald's",
        "Double-Double from In-N-Out Burger",
        "Spicy Chicken Sandwich from Chick-fil-A",
      ],
      output: { "py/object": "_asyncio.Future" },
      prompt_formatter_id: "prompt",
      params: { model: "gpt-3.5-turbo", n: 1, temperature: 1 },
      output_parser_id: "parse_ideas",
    },
    {
      "py/object": "llmtaskgraph.task.LLMTask",
      task_id: "28d9b8a5-11db-4631-a13b-fe4b6ec62482",
      deps: { "py/tuple": [] },
      kwdeps: {},
      created_by: null,
      output_data: [
        "Big Mac from McDonald's",
        "Whopper from Burger King",
        "Crunchwrap Supreme from Taco Bell",
        "Spicy Chicken Sandwich from Chick-fil-A",
        "Double Down from KFC",
      ],
      output: { "py/object": "_asyncio.Future" },
      prompt_formatter_id: "prompt",
      params: { model: "gpt-3.5-turbo", n: 1, temperature: 1 },
      output_parser_id: "parse_ideas",
    },
    {
      "py/object": "llmtaskgraph.task.LLMTask",
      task_id: "26ee3eea-2431-4e69-b51b-9671205bc868",
      deps: { "py/tuple": [] },
      kwdeps: {},
      created_by: null,
      output_data: [
        "Big Mac from McDonald's",
        "Whopper from Burger King",
        "Taco from Taco Bell",
        "Spicy Chicken Sandwich from Chick-fil-A",
        "Double Quarter Pounder with Cheese from McDonald's.",
      ],
      output: { "py/object": "_asyncio.Future" },
      prompt_formatter_id: "prompt",
      params: { model: "gpt-3.5-turbo", n: 1, temperature: 1 },
      output_parser_id: "parse_ideas",
    },
    {
      "py/object": "llmtaskgraph.task.PythonTask",
      task_id: "2a0f8a53-8274-4aeb-94bd-d2a7fd3ebbeb",
      deps: { "py/tuple": [{ "py/id": 2 }, { "py/id": 7 }, { "py/id": 12 }] },
      kwdeps: {},
      created_by: null,
      output_data: [
        "Big Mac from McDonald's",
        "Whopper from Burger King",
        "10 Piece Chicken McNuggets from McDonald's",
        "Double-Double from In-N-Out Burger",
        "Spicy Chicken Sandwich from Chick-fil-A",
        "Big Mac from McDonald's",
        "Whopper from Burger King",
        "Crunchwrap Supreme from Taco Bell",
        "Spicy Chicken Sandwich from Chick-fil-A",
        "Double Down from KFC",
        "Big Mac from McDonald's",
        "Whopper from Burger King",
        "Taco from Taco Bell",
        "Spicy Chicken Sandwich from Chick-fil-A",
        "Double Quarter Pounder with Cheese from McDonald's.",
      ],
      output: { "py/object": "_asyncio.Future" },
      callback_id: "join_ideas",
    },
    {
      "py/object": "llmtaskgraph.task.PythonTask",
      task_id: "b8ba62b7-995d-45d4-b609-2c83f2a98444",
      deps: { "py/tuple": [] },
      kwdeps: {},
      created_by: null,
      output_data: "nested task created",
      output: { "py/object": "_asyncio.Future" },
      callback_id: "add_nested_task",
    },
    {
      "py/object": "llmtaskgraph.task.PythonTask",
      task_id: "2897cb05-0aa2-49a5-8b4d-c9dd93b4cbf0",
      deps: { "py/tuple": [] },
      kwdeps: {},
      created_by: null,
      output_data: null,
      output: { "py/object": "_asyncio.Future" },
      callback_id: "throw_exception",
    },
    {
      "py/object": "llmtaskgraph.task.PythonTask",
      task_id: "b1bd74aa-3d52-46e8-8084-179d4d982b04",
      deps: { "py/tuple": [] },
      kwdeps: {},
      created_by: { "py/id": 21 },
      output_data: "nested task ran",
      output: { "py/object": "_asyncio.Future" },
      callback_id: "nested_task",
    },
  ],
  graph_input: null,
  output_task: { "py/id": 17 },
  started: false,
  function_registry: null,
};

export default function App() {
  return <GraphAndDetail serialized_graph={serialized_graph} />;
}
